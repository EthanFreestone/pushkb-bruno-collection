meta {
  name: External Services
  seq: 1
}

auth {
  mode: oauth2
}

auth:oauth2 {
  grant_type: client_credentials
  access_token_url: {{KeycloakURL}}/realms/{{KeycloakRealm}}/protocol/openid-connect/token
  refresh_token_url: {{KeycloakURL}}/realms/PushKB/protocol/openid-connect/token
  client_id: {{KeycloakClientId}}
  client_secret: {{KeycloakClientSecret}}
  scope: 
  credentials_placement: basic_auth_header
  credentials_id: KeycloakToken
  token_placement: header
  token_header_prefix: Bearer
  auto_fetch_token: true
  auto_refresh_token: true
}

script:pre-request {
  const hostURL = bru.getEnvVar("HostURL");
  const keycloakPort = bru.getEnvVar("KeycloakPort");
  const pushKbPort = bru.getEnvVar("PushKBPort");
  
  bru.setEnvVar("KeycloakURL", `${hostURL}:${keycloakPort}`);
  bru.setEnvVar("PushKBURL", `${hostURL}:${pushKbPort}`);
  
  
  // Find keycloak secrets in client/secret in admin screen
  // Then manually set var KeycloakClientSecret
  //bru.setEnvVar("KeycloakClientId", "postman");
  // Trialling pushKB client instead
  bru.setEnvVar("KeycloakClientId", "apiClient")
  
  // This is not meant to be a secure user password so I don't mind it being here
  // bru.setEnvVar("KeycloakUser", "superuser");
  // bru.setEnvVar("KeycloakUserPassword", "superuser");
  
  // FIXME this needs to come from envs and only set if not present
  bru.setEnvVar("KeycloakUser", "superuser");
  bru.setEnvVar("KeycloakUserPassword", "superuser");
}
